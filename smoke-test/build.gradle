apply plugin: 'com.github.node-gradle.node'

ext {
  python_executable = 'python3'
  venv_name = 'venv'
}

node {

  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  if (project.hasProperty('useSystemNode') && project.getProperty('useSystemNode').toBoolean()) {
    download = false
  } else {
    download = true
  }

  // Version of node to use.
  version = '21.2.0'

  // Version of Yarn to use.
  yarnVersion = '1.22.1'

  // Base URL for fetching node distributions (set nodeDistBaseUrl if you have a mirror).
  if (project.hasProperty('nodeDistBaseUrl')) {
    distBaseUrl = project.getProperty('nodeDistBaseUrl')
  } else {
    distBaseUrl = 'https://nodejs.org/dist'
  }

  // Set the work directory for unpacking node
  workDir = file("${project.projectDir}/.gradle/nodejs")

  // Set the work directory for NPM
  yarnWorkDir = file("${project.projectDir}/.gradle/yarn")

  // Set the work directory where node_modules should be located
  nodeProjectDir = file("${project.projectDir}")

}

task yarnInstall(type: YarnTask) {
  println  "Root directory:  ${project.rootDir}";
  environment = ['NODE_OPTIONS': '--openssl-legacy-provider']
  args = ['install', '--cwd', "${project.rootDir}/smoke-test/tests/cypress"]
}

task installDev(type: Exec) {
    inputs.file file('requirements.txt')
    outputs.file("${venv_name}/.build_install_dev_sentinel")
    commandLine 'bash', '-x', '-c',
        "${venv_name}/bin/pip install -r requirements.txt && " +
        "touch ${venv_name}/.build_install_dev_sentinel"
}

task lint(type: Exec, dependsOn: installDev) {
    commandLine 'bash', '-c',
        "source ${venv_name}/bin/activate && set -x && " +
        "black --check --diff tests/ && " +
        "isort --check --diff tests/ && " +
        "ruff --statistics tests/ && " +
        "mypy tests/"
}
task lintFix(type: Exec, dependsOn: installDev) {
    commandLine 'bash', '-c',
        "source ${venv_name}/bin/activate && set -x && " +
        "black tests/ && " +
        "isort tests/ && " +
        "ruff --fix tests/ && " +
        "mypy tests/"
}
